generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Answer        Answer[]
  Module        Module[]
  subject       Subject[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Subject {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("subjects")
}

model Module {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  parentId    String?
  parent      Module?    @relation("ModuleHierarchy", fields: [parentId], references: [id])
  submodules  Module[]   @relation("ModuleHierarchy")
  questions   Question[]

  user User @relation(fields: [userId], references: [id])

  @@map("modules")
}

model Question {
  id            String         @id @default(cuid())
  text          String
  type          QuestionType
  subjectId     String
  subject       Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  options       Option[]
  answers       Answer[]

  @@map("questions")
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model Answer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answer     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  ORDERING
}
