generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Answer        Answer[]
  Module        Module[]
  ModuleSession ModuleSession[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Module {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  parentId    String?
  public      Boolean?   @default(true)
  clones      Int?       @default(0)
  parent      Module?    @relation("ModuleHierarchy", fields: [parentId], references: [id])
  submodules  Module[]   @relation("ModuleHierarchy")
  questions   Question[]

  user                 User                  @relation(fields: [userId], references: [id])
  moduleSessionModules ModuleSessionModule[]

  @@map("modules")
}

model Question {
  id                    String                  @id @default(cuid())
  text                  String
  public                Boolean                 @default(true)
  type                  QuestionType
  moduleId              String
  module                Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  options               Option[]
  answer                Answer?                 @relation("QuestionToAnswer")
  moduleSessionQuestion ModuleSessionQuestion[]

  @@map("questions")
}

model Option {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  description String?
  isCorrect   Boolean
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}

model Answer {
  id         String   @id @default(cuid())
  userId     String
  questionId String   @unique
  answer     String
  isCorrect  Boolean
  question   Question @relation("QuestionToAnswer", fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model ModuleSessionModule {
  id              String  @id @default(cuid())
  moduleSessionId String
  moduleId        String
  isParent        Boolean @default(false)

  moduleSession ModuleSession @relation(fields: [moduleSessionId], references: [id])
  module        Module        @relation(fields: [moduleId], references: [id])

  @@map("module_session_modules")
}

model ModuleSession {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  progress  Float    @default(0)
  completed Boolean  @default(false)

  user                  User                    @relation(fields: [userId], references: [id])
  moduleSessionModules  ModuleSessionModule[]
  moduleSessionQuestion ModuleSessionQuestion[]

  @@map("module_sessions")
}

model ModuleSessionQuestion {
  id              String   @id @default(cuid())
  moduleSessionId String
  questionId      String
  answered        Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  position        Int      @default(0)

  moduleSession ModuleSession @relation(fields: [moduleSessionId], references: [id])
  question      Question      @relation(fields: [questionId], references: [id])

  @@map("module_session_questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  ORDERING
}
